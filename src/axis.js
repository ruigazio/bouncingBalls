// Generated by CoffeeScript 1.11.1
var Accel, Linear, elasticity, stopThreshold,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

elasticity = 0.9;

stopThreshold = 0.01;

Linear = (function() {
  function Linear(pos1, speed1, farEnd1, radius1) {
    this.pos = pos1;
    this.speed = speed1;
    this.farEnd = farEnd1;
    this.radius = radius1;
    this.hasSpeed = true;
    this.nudgeIn();
  }

  Linear.prototype.nudgeIn = function() {
    var newPos;
    newPos = this.pos + this.speed;
    if ((newPos - this.radius) < 0) {
      this.pos = this.radius;
    } else if ((newPos + this.radius) > this.farEnd) {
      this.pos = this.farEnd - this.radius;
    } else {
      this.pos = newPos;
      return false;
    }
    return true;
  };

  Linear.prototype.setNextPos = function() {
    if (this.nudgeIn()) {
      return this.scaleSpeed(-elasticity);
    }
  };

  Linear.prototype.scaleSpeed = function(n) {
    this.speed *= n;
    if (Math.abs(this.speed) < stopThreshold) {
      return this.hasSpeed = false;
    }
  };

  return Linear;

})();

Accel = (function(superClass) {
  extend(Accel, superClass);

  function Accel(pos, speed, farEnd, radius, accel) {
    this.accel = accel;
    Accel.__super__.constructor.call(this, pos, speed, farEnd, radius);
  }

  Accel.prototype.nudgeIn = function() {
    var candidateDistance, candidatePos, distance, prevPos;
    prevPos = this.pos;
    candidatePos = this.pos + this.speed;
    if ((distance = candidatePos - this.radius) < 0) {
      this.pos = this.radius;
    } else if ((distance = candidatePos + this.radius - this.farEnd) > 0) {
      this.pos = this.farEnd - this.radius;
    } else {
      this.pos = candidatePos;
      return null;
    }
    candidateDistance = candidatePos - prevPos;
    return distance / candidateDistance;
  };

  Accel.prototype.setNextPos = function() {
    var nudgeRatio;
    nudgeRatio = this.nudgeIn();
    if (nudgeRatio === null) {
      return this.speed += this.accel;
    } else {
      this.speed -= this.accel * nudgeRatio;
      return this.scaleSpeed(-elasticity);
    }
  };

  return Accel;

})(Linear);

module.exports = {
  Linear: Linear,
  Accel: Accel
};
