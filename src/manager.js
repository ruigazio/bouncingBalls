// Generated by CoffeeScript 1.11.1
var Ball, Manager;

Ball = require('./ball.js');

Manager = (function() {
  function Manager($canvas, $fps) {
    this.$canvas = $canvas;
    this.$fps = $fps;
    this.$canvas.height = 500;
    this.ctx = this.$canvas.getContext("2d");
    this.objs = [];
    this.timeStamp = 0;
    this.bbox = {
      left: this.$canvas.offsetLeft,
      top: this.$canvas.offsetTop,
      bottom: this.$canvas.offsetTop + this.$canvas.height - this.$canvas.clientTop,
      right: this.$canvas.offsetLeft + this.$canvas.width - this.$canvas.clientLeft
    };
    this.$canvas.addEventListener('click', this.clickHandler.bind(this));
    this.frameNo = 0;
    this.fpsTime = 0;
  }

  Manager.prototype.clickHandler = function(e) {
    var x, y;
    x = e.offsetX || (e.layerX - this.bbox.left);
    y = e.offsetX || (e.layerY - this.bbox.top);
    return this.objs.push(new Ball(this.$canvas, this.ctx, x, y));
  };

  Manager.prototype.setElapsedTime = function() {
    var previousTime;
    previousTime = this.timeStamp;
    this.timeStamp = performance.now();
    return this.elapsedTime = (this.timeStamp - previousTime) / 1000;
  };

  Manager.prototype.renderFPS = function() {
    var previousTime, totalTime;
    previousTime = this.fpsTime;
    this.fpsTime = performance.now();
    totalTime = this.fpsTime - previousTime;
    this.$fps.innerText = Math.floor(50000 / totalTime);
    return this.frameNo = 0;
  };

  Manager.prototype.render = function() {
    var elapsedTime, i, len, newObjs, o, ref;
    this.frameNo++;
    if (!(this.frameNo % 50)) {
      this.renderFPS();
    }
    elapsedTime = this.setElapsedTime();
    this.ctx.clearRect(0, 0, this.$canvas.width, this.$canvas.height);
    newObjs = [];
    ref = this.objs;
    for (i = 0, len = ref.length; i < len; i++) {
      o = ref[i];
      o.draw();
      if (!o.color.isFullWhite()) {
        newObjs.push(o);
      }
    }
    this.objs = newObjs;
    return requestAnimationFrame(this.render.bind(this));
  };

  return Manager;

})();

module.exports = Manager;
